// Describe how proxy should deal with the handshake process of SSL
// connections passing though.
version = "0.1"

// Once the certificate load table surpasses this limit
// Start evicting already loaded certificates
runtime-table-size = "10000"

// By default the proxy will participate in the handshake, so it needs
// to have a certificate that it uses to handshake with the client, and
// potentially another certificate to handshake with the origin server
// In this case, the config must specify both the matching traffic conditions
// and the connection attributes (certificates, tickets, etc).

// Alternatively the proxy could be directed to get out of the way and
// blind tunnel the SSL connection.  There are no options to set in this
// case.  Only specify the matching traffic.

// There are two rule lists.  One that matches on characteristics of the
// origin server.
// Another that matches on characteristics of the client.

// The attributes specified by matches in both rule lists will be used
// to process the connection.  If either rule list specifies a "tunnel" action
// the connection will be blind tunneled. If either rule specifies a "deny" 
// action, the handshake processing will stop

// Each rule list  will be evaluated in order and stop on a match
 
ssl-server-match: 
(
  // Using the same private key for all of my certs
  { ssl-key-name = "privkey.pem";
    child-match:
    (
      { server-ip = "107.23.60.186";
        action = "tunnel";
      },
      { server-cert-name = "safelyfiled.pem;
      },
      { server-cert-name = "asba.pem;
      },
      { server-name = "www.yahoo.com"; 
        server-cert-name = "asba.pem;
      },
      { server-cert-name = "buseyil.pem;
      },
      { server-cert-name = "busey.pem;
      },
      { server-cert-name = "wildgoogle.pem";
      }
    );
  }
)

